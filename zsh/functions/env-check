#!/bin/zsh

env-check() {
    local bin_path="$HOME/.local/bin"
    mkdir -p "$bin_path"

    local -a install_list=("$@")

    if [[ "$OSTYPE" =~ darwin.* ]]; then
        command -v brew &>/dev/null || install_list+=(homebrew)
    fi

    # Check if the following commands are installed
    command -v zplug fzf fd dotfiles zoxide rg bat &>/dev/null && return

    # Check and install each utility
    command -v fzf &>/dev/null || install_list+=(fzf)
    command -v fd &>/dev/null || install_list+=(fd)
    command -v dotfiles &>/dev/null || install_list+=(dotfiles)
    command -v zoxide &>/dev/null || install_list+=(zoxide)
    command -v rg &>/dev/null || install_list+=(ripgrep)
    command -v bat &>/dev/null || install_list+=(bat)
    [[ -d "$ZPLUG_HOME" ]] || install_list+=(zplug)

    pushd "$bin_path" &>/dev/null

    local installed=0
    local failed=0

    __latest-url() {
        local repo filename_pattern
        repo=$1
        filename_pattern=$2

        curl -fsSL "https://api.github.com/repos/$repo/releases/latest" | grep -oE "https://.+/$filename_pattern"
    }

    __try-curl() {
        command -v curl > /dev/null || return 1

        local file=$1
        shift

        if [[ "$file" =~ tar.gz$ ]]; then
            curl -fsSL "$file" | tar -xzf - "$@"
        else
            local tempdir
            tempdir=$(mktemp -d)
            local temp="$tempdir/target.zip"
            if [[ "$tempdir" ]]; then
                curl -fsSLo "$temp" "$file" && unzip -o "$temp" >/dev/null
                rm -rf "$tempdir"
            fi
        fi
    }

    __try-wget() {
        command -v wget > /dev/null || return 1

        local file=$1
        shift

        if [[ "$file" =~ tar.gz$ ]]; then
            wget -O - "$file" | tar -xzf - "$@"
        else
            local tempdir
            tempdir=$(mktemp -d)
            local temp="$tempdir/target.zip"
            if [[ "$tempdir" ]]; then
                wget -O "$temp" "$file" && unzip -o "$temp" >/dev/null
                rm -rf "$tempdir"
            fi
        fi
    }

    __download() {
        local retval=0

        echo "-> Downloading from: $1"

        set -o pipefail
        __try-curl "$@" || __try-wget "$@" || retval=$?
        set +o pipefail

        return "$retval"
    }

    if [[ " ${install_list[@]} " =~ " homebrew " ]]; then
        echo "Installing homebrew..."

        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

        # Add the newly created bin directory to path
        if [[ -d /opt/homebrew/bin ]]; then
            path=(/opt/homebrew/bin $path)
        fi
    fi

    if [[ " ${install_list[@]} " =~ " fzf " ]]; then
        echo "Installing fzf..."

        if command -v brew &>/dev/null; then
            brew install fzf
        else
            # Try to download binary executable
            archi=$(uname -sm)
            case "$archi" in
                Linux\ aarch64*) file_pattern="fzf-[^-]+-linux_arm64\.tar\.gz"   ;;
                Linux\ *64)      file_pattern="fzf-[^-]+-linux_amd64\.tar\.gz"   ;;
                CYGWIN*\ *64)    file_pattern="fzf-[^-]+-windows_amd64\.zip"     ;;
                MINGW*\ *64)     file_pattern="fzf-[^-]+-windows_amd64\.zip"     ;;
                MSYS*\ *64)      file_pattern="fzf-[^-]+-windows_amd64\.zip"     ;;
                Windows*\ *64)   file_pattern="fzf-[^-]+-windows_amd64\.zip"     ;;
                *)               file_pattern= binary_error=1 ;;
            esac

            __download "$(__latest-url "junegunn/fzf" "$file_pattern")"

            if [ -f fzf ]; then
                chmod +x fzf
                installed=1
            else
                echo "Failed to download fzf" >&2
                failed=1
            fi
        fi
    fi

    if [[ " ${install_list[@]} " =~ " fd " ]]; then
        echo "Installing fd..."

        if command -v brew &>/dev/null; then
            brew install fd
        else
            # Try to download binary executable
            archi=$(uname -sm)
            case "$archi" in
                Linux\ aarch64*) file_pattern="fd-[^-]+-arm-unknown-linux-musleabihf\.tar\.gz"   ;;
                Linux\ *64)      file_pattern="fd-[^-]+-x86_64-unknown-linux-musl\.tar\.gz"   ;;
                CYGWIN*\ *64)    file_pattern="fd-[^-]+-i686-pc-windows-gnu\.zip"     ;;
                MINGW*\ *64)     file_pattern="fd-[^-]+-i686-pc-windows-gnu\.zip"     ;;
                MSYS*\ *64)      file_pattern="fd-[^-]+-i686-pc-windows-gnu\.zip"     ;;
                Windows*\ *64)   file_pattern="fd-[^-]+-i686-pc-windows-gnu\.zip"     ;;
                *)               file_pattern= binary_error=1 ;;
            esac

            __download "$(__latest-url "sharkdp/fd" "$file_pattern")" \
                --wildcards '*/fd' --strip-components=1

            if [ -f fd ]; then
                chmod +x fd
                installed=1
            else
                echo "Failed to download fd" >&2
                failed=1
            fi
        fi
    fi

    if [[ " ${install_list[@]} " =~ " zoxide " ]]; then
        echo "Installing zoxide..."

        if command -v brew &>/dev/null; then
            brew install zoxide
        else
            # Try to download binary executable
            archi=$(uname -sm)
            case "$archi" in
                Linux\ aarch64*) file_pattern="zoxide(-.+)?-aarch64-unknown-linux-musl\.tar\.gz"   ;;
                Linux\ *64)      file_pattern="zoxide(-.+)?-x86_64-unknown-linux-musl\.tar\.gz"   ;;
                CYGWIN*\ *64)    file_pattern="zoxide(-.+)?-x86_64-pc-windows-msvc\.zip"     ;;
                MINGW*\ *64)     file_pattern="zoxide(-.+)?-x86_64-pc-windows-msvc\.zip"     ;;
                MSYS*\ *64)      file_pattern="zoxide(-.+)?-x86_64-pc-windows-msvc\.zip"     ;;
                Windows*\ *64)   file_pattern="zoxide(-.+)?-x86_64-pc-windows-msvc\.zip"     ;;
                *)               file_pattern= binary_error=1 ;;
            esac

            __download "$(__latest-url "ajeetdsouza/zoxide" "$file_pattern")" --wildcards zoxide

            if [ -f zoxide ]; then
                chmod +x zoxide
                installed=1
            else
                echo "Failed to download zoxide" >&2
                failed=1
            fi
        fi
    fi

    if [[ " ${install_list[@]} " =~ " dotfiles " ]]; then
        echo "Installing dotfiles..."

        # Try to download binary executable
        archi=$(uname -sm)
        if [[ "$archi" == "Darwin arm64" ]] ; then
            if [[ ! "$GOPATH" ]]; then
                export GOPATH=$HOME/.local/go
                mkdir -p "$GOPATH"
                path=($GOPATH/bin $path)
            fi
            command -v go &>/dev/null || brew install go
            go install github.com/rhysd/dotfiles@latest
        elif [[ "$archi" == "Linux aarch64" ]] ; then
            if [[ ! "$GOPATH" ]]; then
                export GOPATH=$HOME/.local/go
                mkdir -p "$GOPATH"
                path=($GOPATH/bin $path)
            fi
            command -v go &>/dev/null || (curl -fsSL "https://golang.org/dl/go1.17.3.linux-arm64.tar.gz" | tar -C $HOME/.local -xzf-)
            go install github.com/rhysd/dotfiles@latest
        else
            case "$archi" in
                Linux\ aarch64*) file_pattern="dotfiles_linux_arm\.zip"   ;;
                Linux\ *64)      file_pattern="dotfiles_linux_amd64\.zip"   ;;
                CYGWIN*\ *64)    file_pattern="dotfiles_windows_amd64\.exe\.zip"     ;;
                MINGW*\ *64)     file_pattern="dotfiles_windows_amd64\.exe\.zip"     ;;
                MSYS*\ *64)      file_pattern="dotfiles_windows_amd64\.exe\.zip"     ;;
                Windows*\ *64)   file_pattern="dotfiles_windows_amd64\.exe\.zip"     ;;
                *)               file_pattern= binary_error=1 ;;
            esac

            __download "$(__latest-url "rhysd/dotfiles" "$file_pattern")"

            if [ -f dotfiles ]; then
                chmod +x dotfiles
                installed=1
            else
                echo "Failed to download dotfiles" >&2
                failed=1
            fi
        fi
    fi

    if [[ " ${install_list[@]} " =~ " ripgrep " ]]; then
        echo "Installing ripgrep..."

        if command -v brew &>/dev/null; then
            brew install ripgrep
        else
            # Try to download binary executable
            archi=$(uname -sm)
            case "$archi" in
                Linux\ aarch64*) file_pattern="ripgrep-[^-]+-arm-unknown-linux-gnueabihf\.tar\.gz"   ;;
                Linux\ *64)      file_pattern="ripgrep-[^-]+-x86_64-unknown-linux-musl\.tar\.gz"   ;;
                CYGWIN*\ *64)    file_pattern="ripgrep-[^-]+-x86_64-pc-windows-msvc\.zip"     ;;
                MINGW*\ *64)     file_pattern="ripgrep-[^-]+-x86_64-pc-windows-msvc\.zip"     ;;
                MSYS*\ *64)      file_pattern="ripgrep-[^-]+-x86_64-pc-windows-msvc\.zip"     ;;
                Windows*\ *64)   file_pattern="ripgrep-[^-]+-x86_64-pc-windows-msvc\.zip"     ;;
                *)               file_pattern= binary_error=1 ;;
            esac

            __download "$(__latest-url "BurntSushi/ripgrep" "$file_pattern")" \
                --wildcards '*/rg' --strip-components=1

            if [ -f rg ]; then
                chmod +x rg
                installed=1
            else
                echo "Failed to download ripgrep" >&2
                failed=1
            fi
        fi
    fi

    if [[ " ${install_list[@]} " =~ " bat " ]]; then
        echo "Installing bat..."

        if command -v brew &>/dev/null; then
            brew install bat
        else
            # Try to download binary executable
            archi=$(uname -sm)
            case "$archi" in
                Linux\ aarch64*) file_pattern="bat-[^-]+-aarch64-unknown-linux-gnu\.tar\.gz"   ;;
                Linux\ *64)      file_pattern="bat-[^-]+-x86_64-unknown-linux-musl\.tar\.gz"   ;;
                CYGWIN*\ *64)    file_pattern="bat-[^-]+-x86_64-pc-windows-msvc\.zip"     ;;
                MINGW*\ *64)     file_pattern="bat-[^-]+-x86_64-pc-windows-msvc\.zip"     ;;
                MSYS*\ *64)      file_pattern="bat-[^-]+-x86_64-pc-windows-msvc\.zip"     ;;
                Windows*\ *64)   file_pattern="bat-[^-]+-x86_64-pc-windows-msvc\.zip"     ;;
                *)               file_pattern= binary_error=1 ;;
            esac

            __download "$(__latest-url "sharkdp/bat" "$file_pattern")" \
                --wildcards '*/bat' --strip-components=1

            if [ -f bat ]; then
                chmod +x bat
                installed=1
            else
                echo "Failed to download bat" >&2
                failed=1
            fi
        fi
    fi

    if [[ " ${install_list[@]} " =~ " fzy " ]]; then
        echo "Installing fzy..."

        if command -v brew &>/dev/null; then
            brew install fzy
        else
            # build from source
            local tempdir
            tempdir=$(mktemp -d)
            pushd "$tempdir" &>/dev/null
            wget -O target.zip "https://github.com/jhawthorn/fzy/archive/refs/heads/master.zip"
            unzip target.zip
            cd fzy-*
            make
            PREFIX="$HOME/.local" make install
            popd &>/dev/null
        fi
    fi

    if [[ " ${install_list[@]} " =~ " zplug " ]]; then
        curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
    fi

    popd &>/dev/null

    if ((installed)); then
        echo "Restarting zsh..."
        if [[ "$ZSH_EXECUTION_STRING" ]]; then
            ((failed)) || exec zsh -c "$ZSH_EXECUTION_STRING"
        else
            exec zsh
        fi
    fi
}
